{"data":{"markdownRemark":{"html":"<h1 id=\"controller-rest-api-reference\"><a href=\"#controller-rest-api-reference\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Controller REST API Reference</h1>\n<swagger-ui>\n  swagger: '2.0'\n  info:\n    version: 3.0.0\n    title: FogController\n  consumes:\n  - application/json\n  produces:\n  - application/json\n  paths:\n    '/status':\n      get:\n        tags:\n        - Controller\n        description: Returns service health status\n        operationId: getServiceStatus\n        responses:\n          '200':\n            description: Service status\n            schema:\n              $ref: '#/definitions/ServiceStatusResponse'\n          '500':\n            description: Internal Server Error\n    '/email-activation':\n      get:\n        tags:\n        - Controller\n        description: Returns email activation status\n        operationId: getEmailActivationStatus\n        responses:\n          '200':\n            description: Email activation status\n            schema:\n              $ref: '#/definitions/EmailActivationStatusResponse'\n          '500':\n            description: Internal Server Error\n    '/fog-types':\n      get:\n        tags:\n        - Controller\n        description: Gets ioFog types list\n        operationId: getIOFogTypes\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/IOFogTypesResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '500':\n            description: Internal Server Error\n    '/connector':\n      get:\n        tags:\n        - Connector\n        description: Returns a list of connectors\n        operationId: getConnectors\n        parameters:\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: List of Connectors\n            schema:\n              $ref: '#/definitions/ConnectorInfoListResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n      post:\n        tags:\n        - Connector\n        description: Adds a connector\n        operationId: addConnector\n        parameters:\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        - in: body\n          name: ConnectorInfo\n          required: true\n          schema:\n            $ref: '#/definitions/ConnectorInfoRequest'\n        responses:\n          '200':\n            description: Newly created connector\n            schema:\n              $ref: '#/definitions/ConnectorInfoResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n      put:\n        tags:\n        - Connector\n        description: Updates a connector\n        operationId: updateConnector\n        parameters:\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        - in: body\n          name: ConnectorInfo\n          required: true\n          schema:\n            $ref: '#/definitions/ConnectorInfoRequest'\n        responses:\n          '200':\n            description: Updated connector\n            schema:\n              $ref: '#/definitions/ConnectorInfoResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n      delete:\n        tags:\n        - Connector\n        description: Removes a connector\n        operationId: deleteConnector\n        parameters:\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        - in: body\n          name: ConnectorDeleteInfo\n          required: true\n          schema:\n            $ref: '#/definitions/ConnectorInfoDeleteRequest'\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/iofog-list':\n      post:\n        tags:\n        - ioFog\n        description: Returns list of ioFog nodes\n        operationId: getIOFogNodes\n        parameters:\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        - in: body\n          name: Filters\n          required: false\n          schema:\n            $ref: '#/definitions/IOFogNodesListFilters'\n        responses:\n          '200':\n            description: List of ioFog nodes\n            schema:\n              $ref: '#/definitions/IOFogNodesListResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    /iofog:\n      post:\n        tags:\n        - ioFog\n        description: Creates a new ioFog node\n        operationId: createIOFogNode\n        parameters:\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        - in: body\n          name: IOFogNodeInfo\n          required: true\n          schema:\n            $ref: '#/definitions/UpdateIOFogNodeRequestBody'\n        responses:\n          '201':\n            description: Created\n            schema:\n              $ref: '#/definitions/NewIOFogNodeResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/iofog/{uuid}':\n      patch:\n        tags:\n        - ioFog\n        description: Updates existing ioFog node\n        operationId: updateIOFogNode\n        parameters:\n        - in: path\n          name: uuid\n          description: ioFog node id\n          required: true\n          type: string\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        - in: body\n          name: ioFogNodeInfo\n          required: true\n          schema:\n            $ref: '#/definitions/UpdateIOFogNodeRequestBody'\n        responses:\n          '204':\n            description: Updated\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Node Id\n          '500':\n            description: Internal Server Error\n      delete:\n        tags:\n        - ioFog\n        description: Deletes an ioFog node\n        operationId: deleteIOFogNode\n        parameters:\n        - in: path\n          name: uuid\n          description: ioFog node id\n          required: true\n          type: string\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        responses:\n          '202':\n            description: Accepted\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Node Id\n          '500':\n            description: Internal Server Error\n      get:\n        tags:\n        - ioFog\n        description: Gets ioFog node info\n        operationId: getIOFogNode\n        parameters:\n        - in: path\n          name: uuid\n          description: ioFog node id\n          required: true\n          type: string\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/IOFogNodeInfoResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Node Id\n          '500':\n            description: Internal Server Error\n    '/iofog/{uuid}/provisioning-key':\n      get:\n        tags:\n        - ioFog\n        description: Generates provisioning key for an ioFog node\n        operationId: generateProvisioningKey\n        parameters:\n        - in: path\n          name: uuid\n          description: ioFog node id\n          required: true\n          type: string\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        responses:\n          '201':\n            description: Success\n            schema:\n              $ref: '#/definitions/ProvisioningKeyResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Node Id\n          '500':\n            description: Internal Server Error\n    '/iofog/{uuid}/version/{versionCommand}':\n      post:\n        tags:\n        - ioFog\n        description: Set change version command\n        operationId: setVersionCommand\n        parameters:\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: ioFog node id\n          required: true\n          type: string\n        - in: path\n          name: versionCommand\n          description: change version command\n          required: true\n          type: string\n          enum:\n          - upgrade\n          - rollback\n        responses:\n          204:\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          400:\n            description: Bad Request\n          401:\n            description: Not Authorized\n          404:\n            description: Invalid Node Id\n          500:\n            description: Internal Server Error\n    '/iofog/{uuid}/reboot':\n      post:\n        tags:\n        - ioFog\n        description: remote reboot fog agent\n        operationId: setRebootCommand\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: ioFog node id\n          required: true\n          type: string\n        responses:\n          204:\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          401:\n            description: Not Authorized\n          500:\n            description: Internal Server Error\n    '/iofog/{uuid}/hal/hw':\n      get:\n        tags:\n        - ioFog\n        description: Retrieves HAL hardware info\n        operationId: getFogHalHardwareInfo\n        parameters:\n        - in: path\n          name: uuid\n          description: ioFog node id\n          required: true\n          type: string\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/HalInfo'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Node Id\n          '500':\n            description: Internal Server Error\n    '/iofog/{uuid}/hal/usb':\n      get:\n        tags:\n        - ioFog\n        description: Retrieves HAL USB info\n        operationId: getFogHalUsbInfo\n        parameters:\n        - in: path\n          name: uuid\n          description: ioFog node id\n          required: true\n          type: string\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/HalInfo'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Node Id\n          '500':\n            description: Internal Server Error\n    '/agent/provision':\n      post:\n        tags:\n        - Agent\n        description: Provision agent with an ioFog node\n        operationId: agentProvision\n        parameters:\n        - in: body\n          required: true\n          name: AgentProvisioningRequest\n          schema:\n            $ref: '#/definitions/AgentProvisioningRequest'\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/AgentProvisioningResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Expired Provisioning Key\n          '404':\n            description: Invalid Provisioning Key\n          '500':\n            description: Internal Server Error\n    '/agent/deprovision':\n      post:\n        tags:\n        - Agent\n        description: Deprovision agent\n        operationId: agentDeprovision\n        parameters:\n        - in: body\n          required: true\n          name: AgentDeprovisioningRequest\n          schema:\n            $ref: '#/definitions/AgentDeprovisioningRequest'\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/agent/config':\n      get:\n        tags:\n        - Agent\n        description: Get an ioFog node configuration\n        operationId: getIOFogNodeConfig\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/IOFogNodeConfig'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n      patch:\n        tags:\n        - Agent\n        description: Updates an ioFog node configuration\n        operationId: updateIOFogNodeConfig\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        - in: body\n          name: UpdateIOFogNodeConfigRequestBody\n          required: true\n          schema:\n            $ref: '#/definitions/IOFogNodeConfigRequest'\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/agent/config/changes':\n      get:\n        tags:\n        - Agent\n        description: Gets ioFog node changes\n        operationId: getIOFogNodeChanges\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/IOFogNodeConfigChanges'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/agent/status':\n      put:\n        tags:\n        - Agent\n        description: Posts agent status to ioFog node\n        operationId: postAgentStatus\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        - in: body\n          name: AgentStatus\n          required: true\n          schema:\n            $ref: '#/definitions/AgentStatus'\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/agent/microservices':\n      get:\n        tags:\n        - Agent\n        description: Gets microservices running on an ioFog node\n        operationId: getAgentMicroservicesList\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/AgentMicroservicesListResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/agent/microservices/{microserviceUuid}':\n      get:\n        tags:\n        - Agent\n        description: Gets microservices running on an ioFog node\n        operationId: getAgentMicroserviceInfo\n        parameters:\n        - in: path\n          required: true\n          name: microserviceUuid\n          description: Microservice UUID\n          type: string\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/AgentMicroservicesInfoResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Microservice Uuid\n          '500':\n            description: Internal Server Error\n    '/agent/registries':\n      get:\n        tags:\n        - Agent\n        description: Gets list of Docker registries\n        operationId: getRegistriesList\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/RegistriesListResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/agent/tunnel':\n      get:\n        tags:\n        - Agent\n        description: Get an ioFog node tunnel configuration\n        operationId: getIOFogNodeTunnelConfig\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/IOFogNodeTunnelConfigResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Tunnel Not Found\n          '500':\n            description: Internal Server Error\n    '/agent/strace':\n      get:\n        tags:\n        - Agent\n        description: Get an ioFog node strace info\n        operationId: getIOFogNodeStraceInfo\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/IOFogNodeStraceResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Strace Not Found\n          '500':\n            description: Internal Server Error\n      put:\n        tags:\n        - Agent\n        description: Posts agent strace to ioFog node\n        operationId: postIOFogNodeStraceBuffer\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        - in: body\n          name: AgentStraceBuffers\n          required: true\n          schema:\n            $ref: '#/definitions/IOFogNodeStraceBuffer'\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Node Id\n          '500':\n            description: Internal Server Error\n    '/agent/version':\n      get:\n        tags:\n        - Agent\n        description: Get change version command\n        operationId: getChangeVersion\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        responses:\n          200:\n            description: Success\n            schema:\n              $ref: '#/definitions/VersionCommandResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          401:\n            description: Not Authorized\n          404:\n            description: Version Command Not Found\n          500:\n            description: Internal Server Error\n    '/agent/hal/hw':\n      put:\n        tags:\n        - Agent\n        description: Updates HAL hardware info\n        operationId: putHalHardwareInfo\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        - in: body\n          name: HalInfo\n          required: true\n          schema:\n            $ref: '#/definitions/HalInfo'\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/agent/hal/usb':\n      put:\n        tags:\n        - Agent\n        description: Updates HAL USB info\n        operationId: putHalUsbInfo\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        - in: body\n          name: HalInfo\n          required: true\n          schema:\n            $ref: '#/definitions/HalInfo'\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/agent/delete-node':\n      delete:\n        tags:\n        - Agent\n        description: Deletes an ioFog node\n        operationId: deleteAgentNode\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent token\n          required: true\n          type: string\n        responses:\n          '204':\n            description: No Content\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/agent/image-snapshot':\n      get:\n        tags:\n        - Agent\n        description: Get image snapshot info\n        operationId: getImageSnapshot\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        responses:\n          200:\n            description: Success\n            schema:\n              $ref: '#/definitions/ImageSnapshotResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          401:\n            description: Not Authorized\n          404:\n            description: Image Snapshot Not Found\n          500:\n            description: Internal Server Error\n      put:\n        tags:\n        - Agent\n        description: Put image snapshot info on controller\n        operationId: putImageSnapshot\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        - in: body\n          name: ImageSnapshotRequest\n          required: true\n          schema:\n            $ref: '#/definitions/ImageSnapshotRequest'\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/agent/tracking':\n      post:\n        tags:\n        - Agent\n        description: Post tracking info\n        operationId: postTracking\n        parameters:\n        - in: header\n          name: Authorization\n          description: Agent Token\n          required: true\n          type: string\n        - in: body\n          name: PostTrackingRequest\n          required: true\n          schema:\n            $ref: '#/definitions/PostTrackingRequest'  \n        responses:\n          204:\n            description: Success\n          401:\n            description: Not Authorized\n          500:\n            description: Internal Server Error\n    /catalog/microservices:\n      get:\n        tags:\n        - Catalog\n        description: Gets microservices catalog\n        operationId: getMicroservicesCatalog\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/MicroservicesCatalogResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n      post:\n        tags:\n        - Catalog\n        description: Creates a new microservice catalog item\n        operationId: createMicroserviceCatalogItem\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: body\n          name: CreateCatalogItem\n          description: Microservice Catalog Item Info\n          required: true\n          schema:\n            $ref: '#/definitions/CreateUpdateCatalogItemRequestBody'\n        responses:\n          '201':\n            description: Created\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '409':\n            description: Duplicate Name\n          '500':\n            description: Internal Server Error\n    '/catalog/microservices/{id}':\n      get:\n        tags:\n        - Catalog\n        description: Gets microservice catalog item info\n        operationId: getMicroserviceCatalogItem\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: id\n          description: Catalog Item Id\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Catalog Item Info\n            schema:\n              $ref: '#/definitions/CatalogItemInfoResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Catalog Item Id\n          '500':\n            description: Internal Server Error\n      patch:\n        tags:\n        - Catalog\n        description: Updates a microservice catalog item\n        operationId: updateMicroserviceCatalogItem\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: id\n          description: Catalog Item Id\n          required: true\n          type: string\n        - in: body\n          name: UpdateCatalogItem\n          description: Microservice Catalog Item Info\n          required: true\n          schema:\n            $ref: '#/definitions/CreateUpdateCatalogItemRequestBody'\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Catalog Item Id\n          '409':\n            description: Duplicate Name\n          '500':\n            description: Internal Server Error\n      delete:\n        tags:\n        - Catalog\n        description: Deletes a microservice catalog item\n        operationId: deleteMicroserviceCatalogItem\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: id\n          description: Catalog Item Id\n          required: true\n          type: string\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Catalog Item Id\n          '500':\n            description: Internal Server Error\n    /flow:\n      get:\n        tags:\n        - Flow\n        description: Gets list of flows\n        operationId: getFlowsList\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/GetFlowsResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n      post:\n        tags:\n        - Flow\n        description: Creates a new flow\n        operationId: createFlow\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: body\n          name: NetFlowInfo\n          description: New Flow Info\n          required: true\n          schema:\n            $ref: '#/definitions/NewFlowRequest'\n        responses:\n          '201':\n            description: Created\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/flow/{id}':\n      get:\n        tags:\n        - Flow\n        description: Gets flow info\n        operationId: getFlowInfo\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: id\n          description: Flow Id\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/FlowInfoResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Flow Id\n          '500':\n            description: Internal Server Error\n      patch:\n        tags:\n        - Flow\n        description: Updates a flow\n        operationId: updateFlow\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: id\n          description: Flow Id\n          required: true\n          type: string\n        - in: body\n          name: NetFlowInfo\n          description: New Flow Info\n          required: true\n          schema:\n            $ref: '#/definitions/NewFlowRequest'\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Flow Id\n          '500':\n            description: Internal Server Error\n      delete:\n        tags:\n        - Flow\n        description: Deletes a flow\n        operationId: deleteFlow\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: id\n          description: Flow Id\n          required: true\n          type: string\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Flow Id\n          '500':\n            description: Internal Server Error\n    /microservices:\n      get:\n        tags:\n        - Microservices\n        description: Gets list of microservices\n        operationId: getMicroservicesList\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: query\n          name: flowId\n          description: Flow Id\n          required: true\n          type: integer\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/GetMicroservicesResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n      post:\n        tags:\n        - Microservices\n        description: Creates a new microservice on an ioFog node\n        operationId: createMicroservice\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: body\n          name: NewMicroserviceInfo\n          description: New Microservice Info\n          required: true\n          schema:\n            $ref: '#/definitions/NewMicroserviceRequest'\n        responses:\n          '201':\n            description: Created\n            schema:\n              type: object\n              properties:\n                uuid:\n                  type: string\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '409':\n            description: Duplicate Name\n          '500':\n            description: Internal Server Error\n    '/microservices/{uuid}':\n      get:\n        tags:\n        - Microservices\n        description: Gets a microservice info\n        operationId: getMicroserviceInfo\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice Uuid\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/MicroserviceInfoResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Not Found\n          '500':\n            description: Internal Server Error\n      patch:\n        tags:\n        - Microservices\n        description: Updates a microservice\n        operationId: updateMicroservice\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice Uuid\n          required: true\n          type: string\n        - in: body\n          name: UpdateMicroserviceInfo\n          description: Microservice Info\n          required: true\n          schema:\n            $ref: '#/definitions/UpdateMicroserviceRequest'\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '404':\n            description: Not Found\n          '409':\n            description: Duplicate Name\n          '500':\n            description: Internal Server Error\n      delete:\n        tags:\n        - Microservices\n        description: Deletes a microservice\n        operationId: deleteMicroservice\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice Uuid\n          required: true\n          type: string\n        - in: body\n          name: WithCleanupOption\n          description: Delete option\n          required: false\n          schema:\n            type: object\n            properties:\n              withCleanup:\n                type: boolean\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '404':\n            description: Not Found\n          '500':\n            description: Internal Server Error\n    '/microservices/{uuid}/routes/{receiverUuid}':\n      post:\n        tags:\n        - Microservices\n        description: Creates a route from microservice to receiver\n        operationId: createMicroserviceRoute\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice Uuid\n          required: true\n          type: string\n        - in: path\n          name: receiverUuid\n          description: Receiver Microservice Uuid\n          required: true\n          type: string\n        responses:\n          '204':\n            description: Created\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Not Valid\n          '401':\n            description: Not Authorized\n          '404':\n            description: Not Found\n          '500':\n            description: Internal Server Error\n      delete:\n        tags:\n        - Microservices\n        description: Deletes a route microservice\n        operationId: deleteMicroserviceRoute\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice Uuid\n          required: true\n          type: string\n        - in: path\n          name: receiverUuid\n          description: Receiver Microservice Uuid\n          required: true\n          type: string\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Not Valid\n          '401':\n            description: Not Authorized\n          '404':\n            description: Not Found\n          '500':\n            description: Internal Server Error\n    '/microservices/{uuid}/port-mapping':\n      post:\n        tags:\n        - Microservices\n        description: Creates a port mapping for microservice\n        operationId: createMicroservicePortMapping\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice Uuid\n          required: true\n          type: string\n        - in: body\n          name: portMappingData\n          description: information about port mapping\n          required: true\n          schema:\n            $ref: '#/definitions/PortMappingsRequest'\n        responses:\n          '201':\n            description: Created\n            schema:\n              $ref: '#/definitions/PortMappingsPublicResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Not Valid\n          '401':\n            description: Not Authorized\n          '404':\n            description: Not Found\n          '500':\n            description: Internal Server Error\n      get:\n        tags:\n        - Microservices\n        description: Get a port mapping list for microservice\n        operationId: getMicroservicePortMapping\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice Uuid\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Created\n            schema:\n              $ref: '#/definitions/PortMappingsListResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Not Found\n          '500':\n            description: Internal Server Error\n    '/microservices/{uuid}/port-mapping/{internalPort}':\n      delete:\n        tags:\n        - Microservices\n        description: Deletes a port mapping for microservice\n        operationId: deleteMicroservicePortMapping\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice Uuid\n          required: true\n          type: string\n        - in: path\n          name: internalPort\n          description: Internal Port\n          required: true\n          type: string\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Not Found\n          '500':\n            description: Internal Server Error\n    '/microservices/{uuid}/volume-mapping':\n      post:\n        tags:\n        - Microservices\n        description: Creates a volume mapping for microservice\n        operationId: createMicroserviceVolumeMapping\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice Uuid\n          required: true\n          type: string\n        - in: body\n          name: volumeMappingData\n          description: information about volume mapping\n          required: true\n          schema:\n            $ref: '#/definitions/VolumeMapping'\n        responses:\n          '201':\n            description: Created\n            schema:\n              type: object\n              properties:\n                id:\n                  type: number\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Not Valid\n          '401':\n            description: Not Authorized\n          '404':\n            description: Not Found\n          '500':\n            description: Internal Server Error\n      get:\n        tags:\n        - Microservices\n        description: Get a volume mapping list for microservice\n        operationId: getMicroserviceVolumeMapping\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice Uuid\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/VolumeMappingResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Not Found\n          '500':\n            description: Internal Server Error\n    '/microservices/{uuid}/volume-mapping/{id}':\n      delete:\n        tags:\n        - Microservices\n        description: Deletes a volume mapping for microservice\n        operationId: deleteMicroserviceVolumeMapping\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice Uuid\n          required: true\n          type: string\n        - in: path\n          name: id\n          description: Volume id\n          required: true\n          type: string\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Not Valid\n          '401':\n            description: Not Authorized\n          '404':\n            description: Not Found\n          '500':\n            description: Internal Server Error\n    '/microservices/{uuid}/image-snapshot':\n      post:\n        tags:\n        - Diagnostics\n        description: Send request to create image snapshot\n        operationId: createImageSnapshot\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice UUID\n          required: true\n          type: string\n        responses:\n          '201':\n            description: Created\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Microservice UUID\n          '500':\n            description: Internal Server Error\n      get:\n        tags:\n        - Diagnostics\n        description: Download image snapshot\n        operationId: downloadImageSnapshot\n        produces:\n        - application/gzip\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice UUID\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              type: file\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Microservice UUID\n          '500':\n            description: Internal Server Error\n    '/microservices/{uuid}/strace':\n      patch:\n        tags:\n        - Diagnostics\n        description: Enables Microservice Strace Option\n        operationId: enableMicroserviceStrace\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice UUID\n          required: true\n          type: string\n        - in: body\n          name: EnableOption\n          description: Strace info to enable or disable feature\n          required: true\n          schema:\n            type: object\n            properties:\n              enable:\n                type: boolean\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Microservice UUID\n          '500':\n            description: Internal Server Error\n      get:\n        tags:\n        - Diagnostics\n        description: Gets Strace Data for Microservice\n        operationId: getMicroserviceStrace\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: path\n          name: uuid\n          description: Microservice UUID\n          required: true\n          type: string\n        - in: query\n          name: format\n          required: true\n          type: string\n          enum:\n          - file\n          - string\n        responses:\n          '200':\n            description: Success\n            schema:\n              type: object\n              properties:\n                data:\n                  type: string\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Microservice UUID\n          '500':\n            description: Internal Server Error\n      put:\n        tags:\n        - Diagnostics\n        description: Posts Microservice Strace file to FTP\n        operationId: postMicroserviceStraceToFTP\n        parameters:\n        - in: path\n          required: true\n          name: uuid\n          description: Microservice UUID\n          type: string\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: body\n          name: straceData\n          required: true\n          schema:\n            $ref: '#/definitions/MicroserviceStraceFTPBody'\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Microservice UUID\n          '500':\n            description: Internal Server Error\n    '/iofog/{uuid}/tunnel':\n      patch:\n        tags:\n        - Tunnel\n        description: Opens/closes ssh tunnel\n        operationId: openIOFogNodeSshTunnel\n        parameters:\n        - in: path\n          name: uuid\n          description: ioFog node id\n          required: true\n          type: string\n        - in: body\n          name: Action\n          required: true\n          schema:\n            $ref: '#/definitions/ActionBody'\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        responses:\n          '204':\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Node Id\n          '500':\n            description: Internal Server Error\n      get:\n        tags:\n        - Tunnel\n        description: Gets current info about ioFog node ssh tunnel status\n        operationId: getIOFogNodeSshTunnelStatusInfo\n        parameters:\n        - in: path\n          name: uuid\n          description: ioFog node id\n          required: true\n          type: string\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/IOFogNodeTunnelStatusInfoResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Node Id\n          '500':\n            description: Internal Server Error\n    '/registries':\n      post:\n        tags:\n        - Registries\n        description: Creates new registry\n        operationId: createRegistry\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: body\n          name: New Registry\n          required: false\n          schema:\n            $ref: '#/definitions/RegistryBody'\n        responses:\n          '201':\n            description: Created\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n      get:\n        tags:\n        - Registries\n        description: Gets list of registries\n        operationId: getRegistryList\n        parameters:\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        responses:\n          '200':\n            description: Success\n            schema:\n              $ref: '#/definitions/RegistriesListResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '500':\n            description: Internal Server Error\n    '/registries/{id}':\n      delete:\n        tags:\n        - Registries\n        description: Deletes a registry\n        operationId: deleteRegistry\n        parameters:\n        - in: path\n          name: id\n          description: Registry id\n          required: true\n          type: string\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        responses:\n          '204':\n            description: Deleted\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Registry Id\n          '500':\n            description: Internal Server Error\n      patch:\n        tags:\n        - Registries\n        description: Updates a registry\n        operationId: updateRegistry\n        parameters:\n        - in: path\n          name: id\n          description: Registry id\n          required: true\n          type: string\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        - in: body\n          name: Updates\n          required: true\n          schema:\n            $ref: '#/definitions/RegistryBody'\n        responses:\n          '204':\n            description: Updated\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          '400':\n            description: Bad Request\n          '401':\n            description: Not Authorized\n          '404':\n            description: Invalid Registry Id\n          '500':\n            description: Internal Server Error\n    '/user/login':\n      post:\n        tags:\n        - User\n        description: Login\n        operationId: login\n        parameters:\n        - in: body\n          name: credentials\n          required: true\n          schema:\n            $ref: '#/definitions/LoginRequest'\n        responses:\n          200:\n            description: Success\n            schema:\n              $ref: '#/definitions/LoginSuccessResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          400:\n            description: bad request\n          401:\n            description: incorrect credentials\n    '/user/logout':\n      post:\n        tags:\n        - User\n        description: Logout\n        operationId: logout\n        parameters:\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        responses:\n          204:\n            description: Success\n          401:\n            description: Not Authorized\n          500:\n            description: Internal Server Error\n    '/user/signup':\n      post:\n        tags:\n        - User\n        description: Signup\n        operationId: signup\n        parameters:\n        - in: body\n          name: user\n          description: new user data\n          required: true\n          schema:\n            $ref: '#/definitions/SignupRequest'\n        responses:\n          201:\n            description: Success\n            schema:\n              $ref: '#/definitions/SignupSuccessResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          400:\n            description: Bad Request\n          500:\n            description: Internal Server Error\n    '/user/signup/resend-activation':\n      get:\n        tags:\n        - User\n        description: Resend activation email\n        operationId: resendActivationEmail\n        parameters:\n        - in: query\n          name: email\n          required: true\n          type: string\n        responses:\n          204:\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          400:\n            description: Bad Request\n          500:\n            description: Internal Server Error\n    '/user/activate':\n      post:\n        tags:\n        - User\n        description: Activate account\n        operationId: activateAccount\n        parameters:\n        - in: body\n          name: activationCode\n          description: activation code\n          required: true\n          schema:\n            $ref: '#/definitions/UserActivateRequest'\n        responses:\n          303:\n            description: Redirect to login page\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n              Location:\n                description: Login page url\n                type: string\n          404:\n            description: Not Found\n          500:\n            description: Internal Server Error\n    '/user/profile':\n      get:\n        tags:\n        - User\n        description: Get current user profile data\n        operationId: getUserProfile\n        parameters:\n        - in: header\n          name: Authorization\n          description: User token\n          required: true\n          type: string\n        responses:\n          200:\n            description: Success\n            schema:\n              $ref: '#/definitions/UserProfileDetailsResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          401:\n            description: Not Authorized\n          500:\n            description: Internal Server Error\n      patch:\n        tags:\n        - User\n        description: Update user profile\n        operationId: updateUserProfile\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: body\n          name: profileData\n          description: Updated profile data\n          required: true\n          schema:\n            $ref: '#/definitions/UserProfileUpdatesRequest'\n        responses:\n          200:\n            description: Updated user profile\n            schema:\n              $ref: '#/definitions/UserProfileDetailsResponse'\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          400:\n            description: Bad Request\n          401:\n            description: Not Authorized\n          500:\n            description: Internal Server Error\n      delete:\n        tags:\n        - User\n        description: Delete account\n        operationId: deleteAccount\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: body\n          name: deleteParameters\n          description: parameters for delete\n          required: false\n          schema:\n            $ref: '#/definitions/DeleteParameters'\n        responses:\n          204:\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          401:\n            description: Not Authorized\n          500:\n            description: Internal Server Error\n    '/user/password':\n      patch:\n        tags:\n        - User\n        description: change password\n        operationId: changePassword\n        parameters:\n        - in: header\n          name: Authorization\n          description: User Token\n          required: true\n          type: string\n        - in: body\n          name: passwordUpdates\n          description: current and new password\n          required: true\n          schema:\n            $ref: '#/definitions/PasswordChangeRequest'\n        responses:\n          204:\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          401:\n            description: Not Authorized\n          400:\n            description: Bad Request\n          500:\n            description: Internal Server Error\n      delete:\n        tags:\n        - User\n        description: Reset password\n        operationId: resetPassword\n        parameters:\n        - in: body\n          name: email\n          description: email\n          required: true\n          schema:\n            $ref: '#/definitions/PasswordResetRequest'\n        responses:\n          204:\n            description: Success\n            headers:\n              X-Timestamp:\n                type: number\n                description: FogController server timestamp\n          404:\n            description: Not Found\n          500:\n            description: Internal Server Error\n  definitions:\n    ServiceStatusResponse:\n      type: object\n      properties:\n        status:\n          type: string\n          example: ok\n        timestamp:\n          type: number\n    EmailActivationStatusResponse:\n      type: object\n      properties:\n        isEmailActivationEnabled:\n          type: boolean\n    IOFogTypesResponse:\n      type: object\n      properties:\n        fogTypes:\n          type: array\n          items:\n            $ref: '#/definitions/IOFogType'\n    IOFogType:\n      type: object\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        image:\n          type: string\n        description:\n          type: string\n    IOFogNodesListFilters:\n      type: array\n      items:\n        type: object\n        properties:\n          key:\n            type: string\n          value:\n            type: string\n          condition:\n            type: string\n    IOFogNodesListResponse:\n      type: object\n      properties:\n        fogs:\n          type: array\n          items:\n            $ref: '#/definitions/IOFogNodeInfoResponse'\n    ConnectorInfoRequest:\n      type: object\n      properties:\n        name: \n          type: string\n        domain: \n          type: string\n        publicIp: \n          type: string\n        cert: \n          type: string\n        isSelfSignedCert: \n          type: boolean\n        devMode: \n          type: boolean\n    ConnectorInfoDeleteRequest:\n      type: object\n      properties:\n        publicIp: \n          type: string\n    ConnectorInfoListResponse:\n      type: object\n      properties:\n        connectors:\n          type: array\n          items:\n            $ref: '#/definitions/ConnectorInfoResponse'\n    ConnectorInfoResponse:\n      type: object\n      properties:\n        id: \n          type: integer\n        name: \n          type: string\n        domain: \n          type: string\n        publicIp: \n          type: string\n        cert: \n          type: string\n        isSelfSignedCert: \n          type: boolean\n        devMode: \n          type: boolean\n    IOFogNodeInfoResponse:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        location:\n          type: string\n        gpsMode:\n          type: string\n        latitude:\n          type: number\n        longitude:\n          type: number\n        description:\n          type: string\n        createAt:\n          type: number\n        updatedAt:\n          type: number\n        lastActive:\n          type: number\n        daemonStatus:\n          type: string\n        daemonOperatingDuration:\n          type: number\n        daemonLastStart:\n          type: number\n        memoryUsage:\n          type: number\n        diskUsage:\n          type: number\n        cpuUsage:\n          type: number\n        memoryViolation:\n          type: boolean\n        diskViolation:\n          type: boolean\n        cpuViolation:\n          type: boolean\n        systemAvailableDisk:\n          type: integer\n        systemAvailableMemory:\n           type: integer\n        systemTotalCpu:\n           type: number\n        securityStatus:\n           type: string\n        securityViolationInfo:\n           type: string\n        microserviceStatus:\n          type: string\n        repositoryCount:\n          type: number\n        repositoryStatus:\n          type: string\n        lastStatusTime:\n          type: number\n        ipAddress:\n          type: string\n        processedMessages:\n          type: number\n        microserviceMessageCounts:\n          type: number\n        messageSpeed:\n          type: number\n        lastCommandTime:\n          type: number\n        networkInterface:\n          type: string\n        dockerUrl:\n          type: string\n        diskLimit:\n          type: number\n        diskDirectory:\n          type: string\n        memoryLimit:\n          type: number\n        cpuLimit:\n          type: number\n        logLimit:\n          type: number\n        logDirectory:\n          type: string\n        bluetoothEnabled:\n          type: boolean\n        abstractedHardwareEnabled:\n          type: boolean\n        watchdogEnabled:\n          type: boolean\n        logFileCount:\n          type: number\n        version:\n          type: string\n        isReadyToUpgrade:\n          type: boolean\n        isReadyToRollback:\n          type: boolean\n        statusFrequency:\n          type: number\n        changeFrequency:\n          type: number\n        deviceScanFrequency:\n          type: number\n        tunnel:\n          type: string\n        type:\n          $ref: '#/definitions/IOFogType'\n    UpdateIOFogNodeRequestBody:\n      type: object\n      properties:\n        name:\n          type: string\n        location:\n          type: string\n        latitude:\n          type: number\n        longitude:\n          type: number\n        description:\n          type: string\n        dockerUrl:\n          type: string\n          default: 'unix:///var/run/docker.sock'\n        diskLimit:\n          type: number\n          default: 50\n        diskDirectory:\n          type: string\n          default: /var/lib/iofog\n        memoryLimit:\n          type: number\n          default: 4096\n          format: MB\n        cpuLimit:\n          type: number\n          default: 80\n          format: percent\n        logLimit:\n          type: number\n          default: 10\n          format: GB\n        logDirectory:\n          type: string\n          default: /var/log/iofog\n        logFileCount:\n          type: number\n          default: 10\n        statusFrequency:\n          type: number\n          default: 10\n          format: seconds\n        changeFrequency:\n          type: number\n          default: 20\n          format: seconds\n        deviceScanFrequency:\n          type: number\n          default: 20\n          format: seconds\n        bluetoothEnabled:\n          type: boolean\n          default: false\n        watchdogEnabled:\n          type: boolean\n          default: true\n        abstractedHardwareEnabled:\n          type: boolean\n          default: false\n        fogType:\n          type: number\n    NewIOFogNodeResponse:\n      type: object\n      properties:\n        id:\n          type: string\n    ProvisioningKeyResponse:\n      type: object\n      properties:\n        key:\n          type: string\n        expirationTime:\n          type: number\n    AgentProvisioningRequest:\n      type: object\n      required:\n      - type\n      - key\n      properties:\n        type:\n          type: number\n          enum:\n          - 1\n          - 2\n          description: >\n            Architecture\n             * '1': x86\n             * '2': arm\n        key:\n          type: string\n          description: provisioning key\n    AgentProvisioningResponse:\n      type: object\n      properties:\n        id:\n          type: string\n          description: ioFog Node Id\n        token:\n          type: string\n          description: Agent token\n    AgentDeprovisioningRequest:\n      type: object\n      properties:\n        microserviceUuids:\n          type: array\n          items:\n            type: string\n    IOFogNodeConfigChanges:\n      type: object\n      properties:\n        config:\n          type: boolean\n        version:\n          type: boolean\n        reboot:\n          type: boolean\n        deleteNode:\n          type: boolean\n        microservicesList:\n          type: boolean\n        microservicesConfig:\n          type: boolean\n        routing:\n          type: boolean\n        registries:\n          type: boolean\n        tunnel:\n          type: boolean\n        diagnostics:\n          type: boolean\n        isImageSnapshot:\n          type: boolean\n    IOFogNodeConfig:\n      type: object\n      properties:\n        networkInterface:\n          type: string\n        dockerUrl:\n          type: string\n        diskLimit:\n          type: number\n        diskDirectory:\n          type: string\n        memoryLimit:\n          type: number\n        cpuLimit:\n          type: number\n        logLimit:\n          type: number\n        logDirectory:\n          type: string\n        logFileCount:\n          type: number\n        statusFrequency:\n          type: number\n        changeFrequency:\n          type: number\n        deviceScanFrequency:\n          type: number\n        watchdogEnabled:\n          type: boolean\n        latitude:\n          type: number\n        longitude:\n          type: number\n    IOFogNodeConfigRequest:\n      type: object\n      properties:\n        networkInterface:\n          type: string\n        dockerUrl:\n          type: string\n        diskLimit:\n          type: number\n        diskDirectory:\n          type: string\n        memoryLimit:\n          type: number\n        cpuLimit:\n          type: number\n        logLimit:\n          type: number\n        logDirectory:\n          type: string\n        logFileCount:\n          type: number\n        statusFrequency:\n          type: number\n        changeFrequency:\n          type: number\n        deviceScanFrequency:\n          type: number\n        watchdogEnabled:\n          type: boolean\n        latitude:\n          type: number\n        longitude:\n          type: number\n        gpsMode:\n          type: string\n    AgentStatus:\n      type: object\n      properties:\n        daemonStatus:\n          type: string\n        daemonOperatingDuration:\n          type: number\n        daemonLastStart:\n          type: number\n        memoryUsage:\n          type: number\n        diskUsage:\n          type: number\n        cpuUsage:\n          type: number\n        memoryViolation:\n          type: boolean\n        diskViolation:\n          type: boolean\n        cpuViolation:\n          type: boolean\n        systemAvailableDisk:\n          type: integer\n        systemAvailableMemory:\n          type: integer\n        systemTotalCpu:\n          type: number\n        securityStatus:\n          type: string\n        securityViolationInfo:\n          type: string\n        microserviceStatus:\n          type: string\n        repositoryCount:\n          type: number\n        repositoryStatus:\n          type: string\n        systemTime:\n          type: number\n        lastStatusTime:\n          type: number\n        ipAddress:\n          type: string\n        processedMessages:\n          type: number\n        microserviceMessageCounts:\n          type: string\n        messageSpeed:\n          type: number\n        lastCommandTime:\n          type: number\n        tunnelStatus:\n          type: string\n        version:\n          type: string\n        isReadyToUpgrade:\n          type: boolean\n        isReadyToRollback:\n          type: boolean\n    IOFogNodeTunnelConfigResponse:\n      type: object\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n        host:\n          type: string\n        remotePort:\n          type: number\n        localPort:\n          type: number\n        rsaKey:\n          type: string\n        closed:\n          type: boolean\n    IOFogNodeStraceResponse:\n      type: object\n      properties:\n        straceValues:\n          type: array\n          items:\n            $ref: '#/definitions/MicroserviceStrace'\n    MicroserviceStrace:\n      type: object\n      properties:\n        microserviceUuid:\n          type: string\n        straceRun:\n          type: boolean\n    IOFogNodeStraceBuffer:\n      type: object\n      properties:\n        straceData:\n          type: array\n          items:\n            $ref: '#/definitions/MicroserviceStraceBuffer'\n    MicroserviceStraceBuffer:\n      type: object\n      properties:\n        microserviceUuid:\n          type: string\n        buffer:\n          type: string\n    MicroserviceStraceFTPBody:\n      type: object\n      properties:\n        ftpHost:\n          type: string\n        ftpPort:\n          type: number\n        ftpUser:\n          type: string\n        ftpPass:\n          type: string\n        ftpDestDir:\n          type: string\n    AgentMicroservicesListResponse:\n      type: object\n      properties:\n        microservices:\n          type: array\n          items:\n            $ref: '#/definitions/AgentMicroservicesInfoResponse'\n    AgentMicroservicesInfoResponse:\n      type: object\n      properties:\n        uuid:\n          type: string\n        needUpdate:\n          type: boolean\n        rebuild:\n          type: boolean\n        rootHostAccess:\n          type: boolean\n        logSize:\n          type: number\n        imageId:\n          type: string\n        registryUrl:\n          type: string\n        portMappings:\n          type: array\n          items:\n            $ref: '#/definitions/PortMappingAgentRequest'\n        VolumeMappings:\n          type: array\n          items:\n            $ref: '#/definitions/VolumeMapping'\n        imageSnapshot:\n          type: string\n        removeWithCleanUp:\n          type: boolean\n        routes:\n          $ref: '#/definitions/ReceiverMicroservices'\n    ReceiverMicroservices:\n      type: array\n      items:\n        type: string\n    VolumeMapping:\n      type: object\n      properties:\n        hostDestination:\n          type: string\n          example: /var/dest\n        containerDestination:\n          type: string\n          example: /var/dest\n        accessMode:\n          type: string\n          example: rw\n    VolumeMappingResponse:\n      type: object\n      properties:\n        volumeMappings:\n          type: array\n          items:\n            $ref: '#/definitions/VolumeMappingRequest'\n    VolumeMappingRequest:\n      type: object\n      properties:\n        id:\n          type: number\n        hostDestination:\n          type: string\n          example: /var/dest\n        containerDestination:\n          type: string\n          example: /var/dest\n        accessMode:\n          type: string\n          example: rw\n    PortMappingsResponse:\n      type: object\n      properties:\n        internal:\n          type: number\n        external:\n          type: number\n        publicMode:\n          type: boolean\n    PortMappingsRequest:\n      type: object\n      properties:\n        internal:\n          type: number\n        external:\n          type: number\n        publicMode:\n          type: boolean\n    PortMappingsPublicResponse:\n      type: object\n      properties:\n        publicIp:\n          type: string\n        publicPort:\n          type: number\n    PortMappingsListResponse:\n      type: object\n      properties:\n        ports:\n          type: array\n          items:\n            $ref: '#/definitions/PortMappingsItemResponse'\n    PortMappingsItemResponse:\n      type: object\n      properties:\n        internal:\n          type: number\n        external:\n          type: number\n        publicMode:\n          type: boolean\n        publicIp:\n          type: string\n        publicPort:\n          type: number\n    PortMappingAgentRequest:\n      type: object\n      properties:\n        outsidecontainer:\n          type: string\n          example: 80\n        insidecontainer:\n          type: string\n          example: 80\n    RegistriesListResponse:\n      type: object\n      properties:\n        registries:\n          type: array\n          items:\n            $ref: '#/definitions/RegistryResponse'\n    RegistryResponse:\n      type: object\n      properties:\n        id:\n          type: number\n        url:\n          type: string\n        isPublic:\n          type: boolean\n        isSecure:\n          type: boolean\n        certificate:\n          type: string\n        requiresCert:\n          type: boolean\n        username:\n          type: string\n        password:\n          type: string\n        userEmail:\n          type: string\n        userId:\n          type: string\n    RegistryBody:\n      type: object\n      properties:\n        url:\n          type: string\n        isPublic:\n          type: boolean\n        username:\n          type: string\n        password:\n          type: string\n        email:\n          type: string\n        requiresCert:\n          type: boolean\n        certificate:\n          type: string\n    ActionBody:\n      type: object\n      properties:\n        action:\n          type: string\n          enum:\n          - open\n          - close\n    MicroservicesCatalogResponse:\n      type: object\n      properties:\n        catalogItems:\n          type: array\n          items:\n            $ref: '#/definitions/CatalogItemInfoResponse'\n    CatalogItemInfoResponse:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        category:\n          type: string\n        publisher:\n          type: string\n        diskRequired:\n          type: number\n        ramRequired:\n          type: number\n        picture:\n          type: string\n        isPublic:\n          type: boolean\n        registryId:\n          type: number\n        inputType:\n          $ref: '#/definitions/InfoTypeResponse'\n        outputType:\n          $ref: '#/definitions/InfoTypeResponse'\n        configExample:\n          type: string\n        images:\n          $ref: '#/definitions/MicroserviceContainerImages'\n    InfoTypeResponse:\n      type: object\n      properties:\n        infoType:\n          type: string\n        infoFormat:\n          type: string\n    MicroserviceContainerImages:\n      type: array\n      items:\n        $ref: '#/definitions/MicroserviceContainerImage'\n    MicroserviceContainerImage:\n      type: object\n      properties:\n        containerImage:\n          type: string\n        fogTypeId:\n          type: number\n          enum:\n          - 1\n          - 2\n    CreateUpdateCatalogItemRequestBody:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        category:\n          type: string\n        images:\n          $ref: '#/definitions/MicroserviceContainerImages'\n        publisher:\n          type: string\n        diskRequired:\n          type: number\n        ramRequired:\n          type: number\n        picture:\n          type: string\n        isPublic:\n          type: boolean\n        registryId:\n          type: number\n        inputType:\n          $ref: '#/definitions/InfoTypeResponse'\n        outputType:\n          $ref: '#/definitions/InfoTypeResponse'\n        configExample:\n          type: string\n    GetFlowsResponse:\n      type: object\n      properties:\n        flows:\n          type: array\n          items:\n            $ref: '#/definitions/FlowInfoResponse'\n    FlowInfoResponse:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        isActivated:\n          type: boolean\n    NewFlowRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        description:\n          type: string\n        isActivated:\n          type: boolean\n    GetMicroservicesResponse:\n      type: object\n      properties:\n        microservices:\n          type: array\n          items:\n            $ref: '#/definitions/MicroserviceInfoResponse'\n    MicroserviceInfoResponse:\n      type: object\n      properties:\n        uuid:\n          type: string\n        name:\n          type: string\n        config:\n          type: string\n        rootHostAccess:\n          type: boolean\n        logLimit:\n          type: number\n        volumeMappings:\n          type: array\n          items:\n            $ref: '#/definitions/VolumeMappingRequest'\n        ports:\n          type: array\n          items:\n            $ref: '#/definitions/PortMappingsResponse'\n        routes:\n          $ref: '#/definitions/ReceiverMicroservices'\n    NewMicroserviceRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        config:\n          type: string\n        catalogItemId:\n          type: integer\n        flowId:\n          type: integer\n        iofogUuid:\n          type: string\n        rootHostAccess:\n          type: boolean\n        logSize:\n          type: number\n        volumeMappings:\n          type: array\n          items:\n            $ref: '#/definitions/VolumeMapping'\n        ports:\n          type: array\n          items:\n            $ref: '#/definitions/PortMappingsRequest'\n        routes:\n          $ref: '#/definitions/ReceiverMicroservices'\n    UpdateMicroserviceRequest:\n      type: object\n      required:\n      - name\n      properties:\n        name:\n          type: string\n        config:\n          type: string\n        rebuild:\n          type: boolean\n        iofogUuid:\n          type: string\n        rootHostAccess:\n          type: boolean\n        logLimit:\n          type: number\n        volumeMappings:\n          type: array\n          items:\n            $ref: '#/definitions/VolumeMapping'\n    IOFogNodeTunnelStatusInfoResponse:\n      type: object\n      properties:\n        username:\n          type: string\n        host:\n          type: string\n        remotePort:\n          type: number\n        localPort:\n          type: number\n        status:\n          type: string\n    LoginRequest:\n      type: object\n      required:\n      - email\n      - password\n      properties:\n        email:\n          type: string\n        password:\n          type: string\n    LoginSuccessResponse:\n      type: object\n      required:\n      - accessToken\n      properties:\n        accessToken:\n          type: string\n    SignupSuccessResponse:\n      type: object\n      required:\n      - userId\n      - firstName\n      - lastName\n      - email\n      - emailActivated\n      properties:\n        userId:\n          type: number\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        emailActivated:\n          type: boolean\n    UserProfileDetailsResponse:\n      type: object\n      required:\n      - firstName\n      - lastName\n      - email\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n    UserProfileUpdatesRequest:\n      type: object\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n    UserActivateRequest:\n      type: object\n      required:\n      - activationCode\n      properties:\n        activationCode:\n          type: string\n    PasswordResetRequest:\n      type: object\n      required:\n      - email\n      properties:\n        email:\n          type: string\n    PasswordChangeRequest:\n      type: object\n      required:\n      - oldPassword\n      - newPassword\n      properties:\n        oldPassword:\n          type: string\n        newPassword:\n          type: string\n    DeleteParameters:\n      type: object\n      required:\n      - force\n      properties:\n        force:\n          type: boolean\n    SignupRequest:\n      type: object\n      required:\n      - firstName\n      - lastName\n      - email\n      - password\n      properties:\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n    VersionCommandResponse:\n      type: object\n      required:\n      - versionCommand\n      - provisionKey\n      - expirationTime\n      properties:\n        versionCommand:\n          type: string\n        provisionKey:\n          type: string\n        expirationTime:\n          type: string\n    HalInfo:\n      type: object\n      required:\n      - info\n      properties:\n        info:\n          type: string\n    ImageSnapshotResponse:\n      type: object\n      required:\n      - uuid\n      properties:\n        uuid:\n          type: string\n    ImageSnapshotRequest:\n      type: object\n      required:\n      - upstream\n      properties:\n        upstream:\n          type: string\n    PostTrackingRequest: \n      type: array\n      items:\n        $ref: '#/definitions/TrackingEvent'\n    TrackingEvent:\n      type: object\n      required:\n      - uuid\n      properties:\n        uuid:\n          type: string\n        sourceType:\n          type: string\n        timestamp:\n          type: number\n        type:\n          type: string\n        data: \n          type: object\n  schemes:\n  - http\n  - https\n  host: 'localhost:54421'\n  basePath: /api/v3\n</swagger-ui>","fields":{"slug":"/docs/1.0.0/controllers/rest-api.html"}},"allConfigJson":{"edges":[{"node":{"version":"1.0.0","menus":[{"title":"Getting Started","subMenus":[{"title":"Core Concepts","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/core-concepts.html"}}}},{"title":"Quick Start","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/quick-start.html"}}}},{"title":"Setup Your Controllers","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/setup-your-controllers.html"}}}},{"title":"Setup Your Connectors","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/setup-your-connectors.html"}}}},{"title":"Setup Your Agents","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/setup-your-agents.html"}}}}]},{"title":"Tutorial","subMenus":[{"title":"Introduction","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/introduction.html"}}}},{"title":"Get To Know ioFog","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/get-to-know-iofog.html"}}}},{"title":"Manage Your Microservices","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/manage-your-microservices.html"}}}},{"title":"Create Your First Microservice - JavaScript","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/create-your-first-microservice-javascript.html"}}}},{"title":"Deploy Your Microservice","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/deploy-your-microservice.html"}}}}]},{"title":"Writing Microservices","subMenus":[{"title":"Overview","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/writing-microservices/overview.html"}}}},{"title":"SDK","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/writing-microservices/sdk.html"}}}},{"title":"Debugging","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/writing-microservices/debugging.html"}}}}]},{"title":"Using System Microservices","subMenus":[{"title":"Diagnostics","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/using-system-microservices/diagnostics.html"}}}},{"title":"Hardware Abstraction Layer","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/using-system-microservices/hal.html"}}}},{"title":"Bluetooth REST API","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/using-system-microservices/rest-blue.html"}}}}]},{"title":"Using Public Catalog Microservices","subMenus":[{"title":"JSON REST API And Open Weather Map","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/using-public-catalog-microservices/jsonrestapi.html"}}}}]},{"title":"Controllers","subMenus":[{"title":"Overview","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/controllers/overview.html"}}}},{"title":"CLI Usage","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/controllers/cli-usage.html"}}}},{"title":"REST API Reference","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/controllers/rest-api.html"}}}}]},{"title":"Connectors","subMenus":[{"title":"Overview","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/connectors/overview.html"}}}},{"title":"CLI Usage","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/connectors/cli-usage.html"}}}},{"title":"API Reference","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/connectors/api-reference.html"}}}}]},{"title":"Agents","subMenus":[{"title":"Overview","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/agents/overview.html"}}}},{"title":"CLI Usage","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/agents/cli-usage.html"}}}},{"title":"Local API Reference","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/agents/local-api.html"}}}}]},{"title":"Contributing","subMenus":[{"title":"Guidelines","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/contributing/guidelines.html"}}}},{"title":"Code of Conduct","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/contributing/code-of-conduct.html"}}}}]}],"fields":{"path":"/docs/1.0.0/"}}}]}},"pageContext":{"slug":"/docs/1.0.0/controllers/rest-api.html"}}