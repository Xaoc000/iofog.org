{"data":{"markdownRemark":{"html":"<h1 id=\"create-your-first-microservice\"><a href=\"#create-your-first-microservice\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Your First Microservice</h1>\n<h3 id=\"javascript-edition\"><a href=\"#javascript-edition\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript Edition</h3>\n<p><a href=\"https://nodejs.org/\">Node.js</a> is a JavaScript runtime built on Google Chrome's V8 JavaScript engine. In this step we're going to build a simple microservice using Node.js and the <a href=\"../writing-microservices/sdk.html\">ioFog SDK</a>.</p>\n<aside class=\"notifications note\">\n  <h3><img src=\"/images/icos/ico-note.svg\" alt=\"\"> New to Node.js?</h3>\n  <p>This tutorial assumes a working knowledge of Node.js and modern JavaScript.</p>\n</aside>\n<h2 id=\"use-case\"><a href=\"#use-case\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Case</h2>\n<p>To keep things fairly simple, we'll want to have our microservice do something interesting, but not particularly complex. The give you a feel for the primary functions of the SDK, we want a microservice that:</p>\n<ol>\n<li>Uses dynamic configuration variables at runtime</li>\n<li>Takes input from another microservice</li>\n<li>Does some processing on it</li>\n<li>Outputs new data from the results</li>\n</ol>\n<p>So let's build a microservice that computes a real-time <a href=\"https://wikipedia.org/wiki/Moving_average\">moving average</a> from the input, sending the result to any other microservices that might be listening. We'll also set it up to use dynamic configuration for how long the rolling window should be for, so that we can change it later without needing to restart anything.</p>\n<p>If you're in a hurry, you can <a href=\"#putting-them-together\">skip ahead to the end if you'd like</a>.</p>\n<h2 id=\"project-setup\"><a href=\"#project-setup\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project Setup</h2>\n<p>Since we're going to be writing a new microservice, we'll need to create a project directory. Let's create it inside our tutorial's previous working directory we should already be in.</p>\n<p>Let's name our project \"moving-average\"</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\"># create new directory\nmkdir moving-average\n\n# change working directory\ncd moving-average</code></pre>\n      </div>\n<p>Let's create our service's <code class=\"language-text\">&quot;main&quot;</code> entry point:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">touch index.js</code></pre>\n      </div>\n<p>and go again and run <code class=\"language-text\">npm init</code> to setup your default Node.js <code class=\"language-text\">package.json</code>, providing the answers to all its questions and setting <code class=\"language-text\">&quot;main&quot;: &quot;index.js&quot;</code></p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">npm init</code></pre>\n      </div>\n<p>Now we need to install the ioFog SDK for Node.js, which is published to NPM as <a href=\"https://www.npmjs.com/package/@iofog/nodejs-sdk\">@iofog/nodejs-sdk</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">npm install --save @iofog/nodejs-sdk</code></pre>\n      </div>\n<h2 id=\"sdk-basics\"><a href=\"#sdk-basics\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SDK Basics</h2>\n<p>The <a href=\"https://github.com/ioFog/iofog-nodejs-sdk\">ioFog Node.js SDK</a> has a number of APIs, but in this tutorial we're most interested in these:</p>\n<ul>\n<li><a href=\"#iofoginit\"><code class=\"language-text\">iofog.init()</code></a></li>\n<li><a href=\"#iofoggetconfig\"><code class=\"language-text\">iofog.getConfig()</code></a></li>\n<li><a href=\"#iofogwscontrolconnection\"><code class=\"language-text\">iofog.wsControlConnection()</code></a></li>\n<li><a href=\"#iofogwsmessageconnection\"><code class=\"language-text\">iofog.wsMessageConnection()</code></a></li>\n<li><a href=\"#iofogiomessage--iofogwssendmessage\"><code class=\"language-text\">iofog.ioMessage()</code></a></li>\n<li><a href=\"#iofogiomessage--iofogwssendmessage\"><code class=\"language-text\">iofog.wsSendMessage()</code></a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> iofog <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@iofog/nodejs-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h4 id=\"iofoginit\"><a href=\"#iofoginit\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iofog.init()</h4>\n<aside class=\"notifications danger\">\n  <h3><img src=\"/images/icos/ico-danger.svg\" alt=\"\"> Use this as your entry point</h3>\n  <p>The callback you provide should be treated for the most part as a pseudo entry point of your microservice. Make sure you don&apos;t call any SDK APIs before this function has been called!</p>\n</aside>\n<p>This will call the provided callback once the ioFog SDK has finished initializing.</p>\n<p>It accepts a number of arguments, but you'll most likely want to pass these defaults:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\">iofog<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iofog'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54321</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Ready to make API calls</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ready'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>For the curious, the first argument is the host name of the <a href=\"../agents/local-api.html\">Agent's Local API</a>, the second is the port number, and the third can be the container's ID, though it is not required.</p>\n<h4 id=\"iofoggetconfig\"><a href=\"#iofoggetconfig\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iofog.getConfig()</h4>\n<p>Asynchronously fetch the microservice's current configuration (config).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\">iofog<span class=\"token punctuation\">.</span><span class=\"token function\">getConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  onNewConfig<span class=\"token punctuation\">:</span> nextConfig <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something with config</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nextConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  onBadRequest<span class=\"token punctuation\">:</span> err <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getConfig failed: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  onError<span class=\"token punctuation\">:</span> err <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getConfig failed: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h4 id=\"iofogwscontrolconnection\"><a href=\"#iofogwscontrolconnection\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iofog.wsControlConnection()</h4>\n<p>Connect to the ioFog Controller signal channel via WebSocket, which is used to receive notifications from the Controller that our microservice's config has changed.</p>\n<p>Because a config can be any arbitrary JSON, including very large files, the change notifications themselves do not actually include the config. So if you do in fact want to update your local cache of the config, you can follow up a change notification with a call to <code class=\"language-text\">iofog.getConfig()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\">iofog<span class=\"token punctuation\">.</span><span class=\"token function\">wsControlConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  onNewConfigSignal<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// notification-only, if you want to the updated config</span>\n    <span class=\"token comment\">// you'll need to subsequently use iofog.getConfig()</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'config has changed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  onError<span class=\"token punctuation\">:</span> err <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error with Control Connection: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h4 id=\"iofogwsmessageconnection\"><a href=\"#iofogwsmessageconnection\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iofog.wsMessageConnection()</h4>\n<p>Connect to the ioFog message channel via WebSocket. This is where you'll receive any messages routed to this microservice from another.</p>\n<p>Under the hood, communication is brokered by your <a href=\"../connectors/overview.html\">Connector</a> and messages are routed according to that microservice's route settings on the Controller.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\">iofog<span class=\"token punctuation\">.</span><span class=\"token function\">wsMessageConnection</span><span class=\"token punctuation\">(</span>onMessageConnectionOpen<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  onMessages<span class=\"token punctuation\">:</span> messages <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do something with incoming messages</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  onMessageReceipt<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>messageId<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message receipt: '</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> messageId<span class=\"token punctuation\">,</span> timestamp <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  onError<span class=\"token punctuation\">:</span> err <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message WebSocket error: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h4 id=\"iofogiomessage--iofogwssendmessage\"><a href=\"#iofogiomessage--iofogwssendmessage\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iofog.ioMessage() / iofog.wsSendMessage()</h4>\n<p>Create and send ioMessages in JSON, which is the Node.js serialization format used for intercommunication between microservices.</p>\n<p>When your code wants to publish a message to any other microservice, these are what you'll be sending.</p>\n<p>There are a number of optional fields, but the most common are: <code class=\"language-text\">contentdata</code>, <code class=\"language-text\">infotype</code>, and <code class=\"language-text\">infoformat</code>. The <code class=\"language-text\">contentdata</code> field is the actual data payload you want to send, which needs to be provided as a base64 encoded string.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Convert our JSON to a base64 encoded string first</span>\n<span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> iofog<span class=\"token punctuation\">.</span><span class=\"token function\">ioMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  contentdata<span class=\"token punctuation\">:</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  infotype<span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n  infoformat<span class=\"token punctuation\">:</span> <span class=\"token string\">'text/utf-8'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Send the message to any other microservices listening</span>\niofog<span class=\"token punctuation\">.</span><span class=\"token function\">wsSendMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<aside class=\"notifications note\">\n  <h3><img src=\"/images/icos/ico-note.svg\" alt=\"\"> More about ioMessages?</h3>\n  <p>ioMessages can contain a number of options and fields not described here. If you&apos;d like to learn more, checkout the <a href=\"../agents/local-api.html#iomessages\">Local API Reference</a>.</p>\n</aside>\n<h2 id=\"putting-them-together\"><a href=\"#putting-them-together\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Putting Them Together</h2>\n<p>We're ready to start writing some code! Fire up your <a href=\"https://vim-adventures.com/\">favorite editor</a> and open (or create) the <code class=\"language-text\">index.js</code> file we set as our <code class=\"language-text\">package.json</code> \"main\". This is where we'll place all our code.</p>\n<p>Before we begin, let's review our goals for our moving average microservice:</p>\n<ol>\n<li>Window size should be configurable</li>\n<li>Take input from another microservice</li>\n<li>Compute a moving average on that input</li>\n<li>Output new data from the results</li>\n</ol>\n<p>We'll want to have our microservice expect a custom config with a <code class=\"language-text\">maxWindowSize</code> field telling us what the max size of our rolling window should be.</p>\n<p>To compute our real-time moving average, we can first create some utilities to compute an average from any array of numbers:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> values <span class=\"token operator\">=></span> values<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">average</span> <span class=\"token operator\">=</span> values <span class=\"token operator\">=></span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">53</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 32.4</span></code></pre>\n      </div>\n<p>So to do a rolling window, we'll store incoming values in an array up until the point where a max window size is reached, after which we'll discard the oldest value, each time computing a new average.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getMovingAverage</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// We'll later make this configurable</span>\n  <span class=\"token keyword\">const</span> maxWindowSize <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Evict the oldest values once we've reached our max window size</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> maxWindowSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">getMovingAverage</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// ...etc...</span>\n<span class=\"token function\">getMovingAverage</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 32.4</span>\n<span class=\"token function\">getMovingAverage</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> <span class=\"token number\">112</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 54.4</span></code></pre>\n      </div>\n<p>The Sensors microservice produces objects that look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\">\n      <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1540855847710</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"speed\"</span><span class=\"token operator\">:</span> <span class=\"token number\">41.71445712</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"acceleration\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.52431\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rpm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2078.3\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>What we'll do is produce an average for speed, acceleration, and rpm.</p>\n<p>We now have everything we need to complete our microservice:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\">\n      <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> iofog <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@iofog/nodejs-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Used as our in-memory cache of our configuration</span>\n<span class=\"token comment\">// that will be provided by the Controller</span>\n<span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">updateConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  iofog<span class=\"token punctuation\">.</span><span class=\"token function\">getConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    onNewConfig<span class=\"token punctuation\">:</span> newConfig <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      config <span class=\"token operator\">=</span> newConfig<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    onBadRequest<span class=\"token punctuation\">:</span> err <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updateConfig failed: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    onError<span class=\"token punctuation\">:</span> err <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updateConfig failed: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> values <span class=\"token operator\">=></span> values<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">average</span> <span class=\"token operator\">=</span> values <span class=\"token operator\">=></span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getMovingAverage</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Evict the oldest values once we've reached our max window size.</span>\n  <span class=\"token comment\">// Notice this is using the value from our config!</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> config<span class=\"token punctuation\">.</span>maxWindowSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// &lt;------- config</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This is basically our \"entry point\", provided to iofog.init() below</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">updateConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  iofog<span class=\"token punctuation\">.</span><span class=\"token function\">wsControlConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    onNewConfigSignal<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    onError<span class=\"token punctuation\">:</span> err <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error with Control Connection: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onMessageConnectionOpen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Listening for incoming messages'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Cache for our previous values received so we can compute our average</span>\n  <span class=\"token keyword\">const</span> prevSpeeds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> prevAccelerations <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> prevRpms <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  iofog<span class=\"token punctuation\">.</span><span class=\"token function\">wsMessageConnection</span><span class=\"token punctuation\">(</span>onMessageConnectionOpen<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    onMessages<span class=\"token punctuation\">:</span> messages <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> msg <span class=\"token keyword\">of</span> messages<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>contentdata<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token comment\">// Produce moving averages for all the sensor values</span>\n          <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            isAverage<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            time<span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">,</span> <span class=\"token comment\">// same time as</span>\n            speed<span class=\"token punctuation\">:</span> <span class=\"token function\">getMovingAverage</span><span class=\"token punctuation\">(</span>prevSpeeds<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            acceleration<span class=\"token punctuation\">:</span> <span class=\"token function\">getMovingAverage</span><span class=\"token punctuation\">(</span>\n              prevAccelerations<span class=\"token punctuation\">,</span>\n              input<span class=\"token punctuation\">.</span>acceleration\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            rpm<span class=\"token punctuation\">:</span> <span class=\"token function\">getMovingAverage</span><span class=\"token punctuation\">(</span>prevRpms<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span>rpm<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> iofog<span class=\"token punctuation\">.</span><span class=\"token function\">ioMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            contentdata<span class=\"token punctuation\">:</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            infotype<span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n            infoformat<span class=\"token punctuation\">:</span> <span class=\"token string\">'text/utf-8'</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          iofog<span class=\"token punctuation\">.</span><span class=\"token function\">wsSendMessage</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    onMessageReceipt<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>messageId<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message receipt: '</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> messageId<span class=\"token punctuation\">,</span> timestamp <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    onError<span class=\"token punctuation\">:</span> err <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Message WebSocket error: '</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\niofog<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iofog'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54321</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h2 id=\"create-dockerfile\"><a href=\"#create-dockerfile\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create Dockerfile</h2>\n<p>We now to need to package up our code as a Docker image, so that we can deploy it in the next step. Docker images are created from instructions written in a Dockerfile.</p>\n<p>Like all build scripts, Dockerfiles can become a bit complex for advanced applications, but fortunately for our simple microservice, ours is pretty simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\">\n      <pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">FROM node:10\nCOPY . /moving-average\nWORKDIR /moving-average\nRUN npm install --only=production\nCMD node .</code></pre>\n      </div>\n<h2 id=\"build-your-docker-image\"><a href=\"#build-your-docker-image\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build Your Docker Image</h2>\n<p>With our Dockerfile setup, we can go ahead and build our image:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\"># Don&#39;t forget the dot . at the end\ndocker build --tag yourname/moving-average:v1  .</code></pre>\n      </div>\n<p>This might take a few minutes, as it needs to download a default Node.js environment we're using as a base with <code class=\"language-text\">FROM node:10</code>.</p>\n<h2 id=\"deploy-your-microservice\"><a href=\"#deploy-your-microservice\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploy Your Microservice</h2>\n<p>We now want to see this code in action, so let's go ahead and learn how to deploy this microservice to our ioFog tutorial environment.</p>\n<p><a href=\"deploy-your-microservice.html\">Continue To Next Step</a>.</p>","fields":{"slug":"/docs/1.0.0/tutorial/create-your-first-microservice-javascript.html"}},"allConfigJson":{"edges":[{"node":{"version":"1.0.0","menus":[{"title":"Getting Started","subMenus":[{"title":"Core Concepts","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/core-concepts.html"}}}},{"title":"Quick Start","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/quick-start.html"}}}},{"title":"Setup Your Controllers","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/setup-your-controllers.html"}}}},{"title":"Setup Your Connectors","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/setup-your-connectors.html"}}}},{"title":"Setup Your Agents","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/setup-your-agents.html"}}}}]},{"title":"Tutorial","subMenus":[{"title":"Introduction","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/introduction.html"}}}},{"title":"Get To Know ioFog","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/get-to-know-iofog.html"}}}},{"title":"Manage Your Microservices","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/manage-your-microservices.html"}}}},{"title":"Create Your First Microservice - JavaScript","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/create-your-first-microservice-javascript.html"}}}},{"title":"Deploy Your Microservice","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/deploy-your-microservice.html"}}}}]},{"title":"Writing Microservices","subMenus":[{"title":"Overview","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/writing-microservices/overview.html"}}}},{"title":"SDK","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/writing-microservices/sdk.html"}}}},{"title":"Debugging","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/writing-microservices/debugging.html"}}}}]},{"title":"Using System Microservices","subMenus":[{"title":"Diagnostics","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/using-system-microservices/diagnostics.html"}}}},{"title":"Hardware Abstraction Layer","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/using-system-microservices/hal.html"}}}},{"title":"Bluetooth REST API","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/using-system-microservices/rest-blue.html"}}}}]},{"title":"Using Public Catalog Microservices","subMenus":[{"title":"JSON REST API And Open Weather Map","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/using-public-catalog-microservices/jsonrestapi.html"}}}}]},{"title":"Controllers","subMenus":[{"title":"Overview","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/controllers/overview.html"}}}},{"title":"CLI Usage","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/controllers/cli-usage.html"}}}},{"title":"REST API Reference","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/controllers/rest-api.html"}}}}]},{"title":"Connectors","subMenus":[{"title":"Overview","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/connectors/overview.html"}}}},{"title":"CLI Usage","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/connectors/cli-usage.html"}}}},{"title":"API Reference","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/connectors/api-reference.html"}}}}]},{"title":"Agents","subMenus":[{"title":"Overview","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/agents/overview.html"}}}},{"title":"CLI Usage","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/agents/cli-usage.html"}}}},{"title":"Local API Reference","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/agents/local-api.html"}}}}]},{"title":"Contributing","subMenus":[{"title":"Guidelines","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/contributing/guidelines.html"}}}},{"title":"Code of Conduct","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/contributing/code-of-conduct.html"}}}}]}],"fields":{"path":"/docs/1.0.0/"}}}]}},"pageContext":{"slug":"/docs/1.0.0/tutorial/create-your-first-microservice-javascript.html"}}