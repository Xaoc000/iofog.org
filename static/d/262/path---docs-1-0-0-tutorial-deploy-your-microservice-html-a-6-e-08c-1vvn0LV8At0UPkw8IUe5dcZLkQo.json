{"data":{"markdownRemark":{"html":"<h1 id=\"deploy-your-microservice\"><a href=\"#deploy-your-microservice\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deploy Your Microservice</h1>\n<p>In this step we'll learn how to deploy our newly created microservice to our ioFog tutorial environment.</p>\n<h2 id=\"register-your-docker-image\"><a href=\"#register-your-docker-image\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Register Your Docker Image</h2>\n<p>With our Docker image from the previous step in hand, it's time to publish it to a <a href=\"https://docs.docker.com/registry/\">Docker Registry</a>.</p>\n<p>While you can use a custom registry (or the public <a href=\"https://hub.docker.com/\">Docker Hub</a>), the Controller also comes with a built-in private registry that represents the local cache on the ioFog edge compute nodes.</p>\n<p>To get a list of the container registries, we can use <code class=\"language-text\">registry list</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">iofog-controller registry list</code></pre>\n      </div>\n<p>You should see two, the first being <a href=\"https://hub.docker.com/\">Docker Hub</a>, but we're going to use the second one, which is the built-in private registry:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\">\n      <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"from_cache\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"isPublic\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"isSecure\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"certificate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"requiresCert\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"password\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"userEmail\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"userId\"</span><span class=\"token operator\">:</span> <span class=\"token null\">null</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The unique ID for the built-in registry is always <code class=\"language-text\">2</code>.</p>\n<p>Now that we have that registry ID, we can use it to add our Docker image to its catalog. We'll provide <code class=\"language-text\">yourname/moving-average:v1</code> as the x86-image of our microservice:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\"># registry ID 2 is the internal private one provided by ioFog\niofog-controller catalog add \\\n  --name &quot;Moving Average&quot; \\\n  --x86-image yourname/moving-average:v1 \\\n  --registry-id 2 \\\n  --user-id 1</code></pre>\n      </div>\n<p>This command will return a catalog ID that we'll use in the next step.</p>\n<h2 id=\"add-your-microservice\"><a href=\"#add-your-microservice\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add Your Microservice</h2>\n<p>Now that the Docker image containing our microservice code is registered, we can spin up new copies of it also using the Controller.</p>\n<p>Instantiating a new microservice is done using the <code class=\"language-text\">microservice add</code> command. We need to provide several options, the most notable being the catalog ID we received in the previous section as well as a node UUIDâ€”which is the UUID of the edge node we want this microservice to run on.</p>\n<p>So let's find the UUID for the first Agent with the name \"Agent 1\":</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">iofog-controller iofog list</code></pre>\n      </div>\n<p>Using that UUID, we can pass it and our other arguments to instantiate the microservice:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">iofog-controller microservice add \\\n  --name &quot;Moving Average 1&quot; \\\n  --catalog-id &lt;catalog_id&gt; \\\n  --config &#39;{ &quot;maxWindowSize&quot;: 10 }&#39; \\\n  --iofog-uuid &lt;iofog_uuid&gt; \\\n  --flow-id 1</code></pre>\n      </div>\n<p>This is also a great opportunity to include our custom config for our <code class=\"language-text\">maxWindowSize</code>.</p>\n<p>This command will return the microservice UUID, which we'll then use in the next step to setup our routes.</p>\n<aside class=\"notifications note\">\n  <h3><img src=\"/images/icos/ico-note.svg\" alt=\"\"> Flow IDs</h3>\n  <p>We provided <code class=\"language-text\">--flow-id 1</code> because our tutorial environment already has a default &quot;flow&quot; setup. <a href=\"../controllers/cli-usage.html#flow\">Learn more about flows</a>.</p>\n</aside>\n<p><a href=\"../controllers/cli-usage.html#microservice\">View all CLI options</a></p>\n<h2 id=\"setup-our-routes\"><a href=\"#setup-our-routes\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup Our Routes</h2>\n<p>With the microservice UUID from the last step, let's change our routes so that our new microservice is placed between the Sensors and the REST API.</p>\n<p>First, let's remove the old route from the Sensors to the REST API. We need to retrieve the microservice UUIDs for Sensors and the REST API:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">iofog-controller microservice list</code></pre>\n      </div>\n<p>After finding those two UUIDs in the list, provide the Sensors UUID and API UUID separated by a semicolon to <code class=\"language-text\">microservice route-remove --route &lt;source_uuid&gt;:&lt;dest_uuid&gt;</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\"># Note the semicolon between the two UUIDs!\niofog-controller microservice route-remove \\\n  --route &lt;sensors_uuid&gt;:&lt;api_uuid&gt;</code></pre>\n      </div>\n<p>Now we need to place two new routes: one from the Sensors to Moving Average, and another from Moving Average to the REST API; this places our new microservice in between them.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\"># Sensors -&gt; Moving Average\niofog-controller microservice route-create \\\n  --route &lt;sensors_uuid&gt;:&lt;moving_average_uuid&gt;\n\n# Moving Average -&gt; REST API\niofog-controller microservice route-create \\\n  --route &lt;moving_average_uuid&gt;:&lt;rest_api_uuid&gt;</code></pre>\n      </div>\n<p>Finally, for the moment of truth. Let's first try a curl request to our REST API:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">curl http://localhost:10101/</code></pre>\n      </div>\n<p>If everything is working correctly, the JSON returned should be our new moving averages and contain our <code class=\"language-text\">&quot;isAverage&quot;: true</code> field we added.</p>\n<p>We can also open up the <a href=\"http://localhost:10102/?load=dashboard.json\">Freeboard dashboard</a> to view the averaged values!</p>\n<h2 id=\"update-a-microservice\"><a href=\"#update-a-microservice\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Update a Microservice</h2>\n<p>Once a microservice is up and running you will probably need to modify it later, which we can also do with the Controller.</p>\n<p>The <code class=\"language-text\">microservice update</code> command is used to update a particular microservice:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\">\n      <pre class=\"language-sh\"><code class=\"language-sh\">iofog-controller microservice update \\\n  --microservice-uuid &lt;uuid&gt; \\\n  --config &#39;{ &quot;maxWindowSize&quot;: 100 }&#39; \\</code></pre>\n      </div>\n<p><a href=\"../controllers/cli-usage.html#microservice\">View all CLI options</a></p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Congratulations! You've now have the fundamentals of ioFog. Once you're feeling more comfortable you can create a blank <a href=\"../gettings-started/quick-start.html\">Development Environment</a> locally, or start setting up <a href=\"../getting-started/setup-your-controllers.html\">ioFog in production</a>.</p>\n<aside class=\"notifications note\">\n  <h3><img src=\"/images/icos/ico-note.svg\" alt=\"\"> Questions? Run into issues?</h3>\n  <p>If you ran into an issue, have a question, or just want to get plugged into the community, head over to our <a href=\"https://discuss.iofog.org/\">Discussion Forum</a>. We&apos;d love to have you!</p>\n</aside>","fields":{"slug":"/docs/1.0.0/tutorial/deploy-your-microservice.html"}},"allConfigJson":{"edges":[{"node":{"version":"1.0.0","menus":[{"title":"Getting Started","subMenus":[{"title":"Core Concepts","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/core-concepts.html"}}}},{"title":"Quick Start","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/quick-start.html"}}}},{"title":"Setup Your Controllers","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/setup-your-controllers.html"}}}},{"title":"Setup Your Connectors","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/setup-your-connectors.html"}}}},{"title":"Setup Your Agents","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/getting-started/setup-your-agents.html"}}}}]},{"title":"Tutorial","subMenus":[{"title":"Introduction","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/introduction.html"}}}},{"title":"Get To Know ioFog","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/get-to-know-iofog.html"}}}},{"title":"Manage Your Microservices","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/manage-your-microservices.html"}}}},{"title":"Create Your First Microservice - JavaScript","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/create-your-first-microservice-javascript.html"}}}},{"title":"Deploy Your Microservice","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/tutorial/deploy-your-microservice.html"}}}}]},{"title":"Writing Microservices","subMenus":[{"title":"Overview","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/writing-microservices/overview.html"}}}},{"title":"SDK","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/writing-microservices/sdk.html"}}}},{"title":"Debugging","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/writing-microservices/debugging.html"}}}}]},{"title":"Using System Microservices","subMenus":[{"title":"Diagnostics","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/using-system-microservices/diagnostics.html"}}}},{"title":"Hardware Abstraction Layer","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/using-system-microservices/hal.html"}}}},{"title":"Bluetooth REST API","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/using-system-microservices/rest-blue.html"}}}}]},{"title":"Using Public Catalog Microservices","subMenus":[{"title":"JSON REST API And Open Weather Map","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/using-public-catalog-microservices/jsonrestapi.html"}}}}]},{"title":"Controllers","subMenus":[{"title":"Overview","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/controllers/overview.html"}}}},{"title":"CLI Usage","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/controllers/cli-usage.html"}}}},{"title":"REST API Reference","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/controllers/rest-api.html"}}}}]},{"title":"Connectors","subMenus":[{"title":"Overview","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/connectors/overview.html"}}}},{"title":"CLI Usage","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/connectors/cli-usage.html"}}}},{"title":"API Reference","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/connectors/api-reference.html"}}}}]},{"title":"Agents","subMenus":[{"title":"Overview","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/agents/overview.html"}}}},{"title":"CLI Usage","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/agents/cli-usage.html"}}}},{"title":"Local API Reference","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/agents/local-api.html"}}}}]},{"title":"Contributing","subMenus":[{"title":"Guidelines","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/contributing/guidelines.html"}}}},{"title":"Code of Conduct","entry":{"childMarkdownRemark":{"fields":{"slug":"/docs/1.0.0/contributing/code-of-conduct.html"}}}}]}],"fields":{"path":"/docs/1.0.0/"}}}]}},"pageContext":{"slug":"/docs/1.0.0/tutorial/deploy-your-microservice.html"}}